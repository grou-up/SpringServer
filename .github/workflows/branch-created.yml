# workflow(스크립트 전체)의 이름을 지정
name: Deploy to EC2 With Jar

# push 이벤트 지정 (트리거 동작)
# dev branch에 push 될 때마다 workflow가 실행되도록 지정
on:
  push:
    branches:
      - main

jobs:
  # 작업의 이름 지정
  build-and-deploy:
    # 가상의 작업 공간(가상 서버)에 ubuntu 설치
    runs-on: ubuntu-latest
    steps:
      # 소스 코드를 ubuntu로 가져옴
      - uses: actions/checkout@v2

      # github 소스 코드를 가상의 작업 공간
      - name: Set up JDK 17
        # 쉽게 자바를 설치할 수 있는 라이브러리를 받아와서 java 설치
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        # 배포할 폴더로 이동
        working-directory: .
        # 실행 가능한 jar파일만 생성 (plain jar 미생성)
        run: |
          chmod +x ./gradlew 
          ./gradlew bootJar

      - name: Copy jar to EC2
        uses: appleboy/scp-action@master
        with:
          # Secret 처리
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./build/libs/*.jar"
          # 우분투 경로
          target: "/home/${{ secrets.EC2_USERNAME }}"

      - name: Install Java and Run Jar on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # java가 미설치되어 있으면 설치 / 배포할 때마다 소스 코드 변경사항 반영 위해 서버 재구동 (백그라운드로 실행 - nohup)
          # rds 사용 위해 application.yml의 db 관련 코드 가져오기 (역슬래시는 줄바꿈을 의미)
          # github action secret key를 주입시킴 (환경 변수 갈아끼우기 - 덮어쓰기 됨)
          # 마지막에 실행 로그 찍기
          # 2>&1 &는 nohup과 한 세트 (안써넣으면 nohup이 중간에 멈춤)
          script: |
            if ! type java > /dev/null; then
              sudo apt update && sudo apt install openjdk-17-jdk -y
            else
              echo "java is already installed"
            fi
            sudo killall java || true
            nohup java -jar /home/${{ secrets.EC2_USERNAME }}/build/libs/*.jar \
            --spring.datasource.url=jdbc:mariadb://${{ secrets.DB_HOST }}:3306/agn \
            --spring.datasource.username=${{ secrets.DB_USERNAME }} \
            --spring.datasource.password=${{ secrets.DB_PASSWORD }} > /home/${{ secrets.EC2_USERNAME }}/app.log 2>&1 &