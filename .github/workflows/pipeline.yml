name: Spring Boot CI/CD Pipeline
on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  build-and-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira Issue
        id: extract
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          ISSUE_KEY=$(echo $PR_TITLE | grep -oP '([A-Z]+-\d+)')
          echo "issue=$ISSUE_KEY" >> $GITHUB_OUTPUT
          echo "branch_name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        id: build
        env:
          DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          ./gradlew clean build
          if [ $? -ne 0 ]; then
            curl -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.extract.outputs.issue }}/transitions \
              -d '{"transition": {"id": "10"}}'
            exit 1
          fi

      - name: Run Tests
        env:
          DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: |
          ./gradlew test
          if [ $? -ne 0 ]; then
            curl -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.extract.outputs.issue }}/transitions \
              -d '{"transition": {"id": "10"}}'
            exit 1
          fi

      - name: Build & Push Docker Image
        if: success()
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
        run: |
          if ! docker build -t $DOCKER_IMAGE .; then
            curl -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.extract.outputs.issue }}/transitions \
              -d '{"transition": {"id": "10"}}'
            exit 1
          fi
          
          if ! echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin; then
            curl -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.extract.outputs.issue }}/transitions \
              -d '{"transition": {"id": "10"}}'
            exit 1
          fi
          
          if ! docker push $DOCKER_IMAGE; then
            curl -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.extract.outputs.issue }}/transitions \
              -d '{"transition": {"id": "10"}}'
            exit 1
          fi

      - name: Deploy to EC2
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
            docker stop spring-app || true
            docker rm spring-app || true
            docker run -d --name spring-app \
              -e DATASOURCE_URL=${{ secrets.DATASOURCE_URL }} \
              -e DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }} \
              -e DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -p 8080:8080 \
              ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}

      - name: Update to Work Complete
        if: success()
        run: |
          curl -X POST \
            -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${{ steps.extract.outputs.issue }}/transitions \
            -d '{"transition": {"id": "8"}}'

      - name: Delete branch
        if: success()
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.extract.outputs.branch_name }}

#        Slack 알림을 위한 코드
#      - name: Notify Error
#        if: failure()
#        run: |
#          curl -X POST -H 'Content-type: application/json' \
#            --data '{"text":"Spring 서버 빌드/배포 실패: ${{ steps.extract.outputs.issue }}"}' \
#            ${{ secrets.SLACK_WEBHOOK_URL }}