name: Spring Boot CI/CD Pipeline
on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  pull-requests: write
  contents: write

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      jira_issue: ${{ steps.extract.outputs.issue }}
      branch_name: ${{ steps.extract.outputs.branch_name }}
    steps:
      - name: Extract Jira Issue
        id: extract
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          ISSUE_KEY=$(echo $PR_TITLE | grep -oP 'GROU-\d+')
          if [ -z "$ISSUE_KEY" ]; then
            echo "No Jira issue found in PR title"
            exit 1
          fi
          echo "Found Jira issue: $ISSUE_KEY"
          echo "issue=$ISSUE_KEY" >> $GITHUB_OUTPUT
          echo "branch_name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build with Gradle
        env:
          DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
        run: |
          chmod +x gradlew
          ./gradlew bootJar

      - name: Build Docker Image
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}
        run: |
          docker build -t $DOCKER_IMAGE .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push $DOCKER_IMAGE

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install Docker and Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            
            cat << 'EOF' > docker_password.txt
            ${{ secrets.DOCKER_PASSWORD }}
            
            EOF
            
            cat docker_password.txt | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            rm docker_password.txt
            
            if sudo docker ps -a | grep -q spring-app; then
            echo "Backing up existing container logs..."
            sudo docker logs spring-app > spring-app.log 2>&1 || true
            sudo docker stop spring-app || true
            sudo docker rm spring-app || true
            fi
            
            cat << 'EOF' > env.list
            DATASOURCE_URL=${{ secrets.DATASOURCE_URL }}
            DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}
            DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}
            JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
            EOF
            
            sudo docker pull "${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}"
            sudo docker run -d \
            --name spring-app \
            -p 8080:8080 \
            --env-file env.list \
            "${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}"
            
            rm env.list
            
            sleep 10
            if ! sudo docker ps | grep -q spring-app; then
            echo "Container failed to start"
            exit 1
            fi
            
            if ! netstat -tuln | grep -q ':8080'; then
            echo "Application port 8080 is not open"
            exit 1
            fi

  handle-success:
    needs: [build, deploy]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Update Jira and Cleanup
        run: |
          ISSUE_KEY="${{ needs.build.outputs.jira_issue }}"
          if [ -n "$ISSUE_KEY" ]; then
            echo "Updating Jira issue: $ISSUE_KEY"
            curl -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$ISSUE_KEY/transitions \
              -d '{"transition": {"id": "8"}}'
          else
            echo "No Jira issue key found"
            exit 1
          fi

      - name: Delete branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ needs.build.outputs.branch_name }}

  handle-failure:
    needs: [build, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Update Jira Status on Failure
        run: |
          ISSUE_KEY="${{ needs.build.outputs.jira_issue }}"
          if [ -n "$ISSUE_KEY" ]; then
            echo "Updating Jira issue: $ISSUE_KEY"
            curl -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$ISSUE_KEY/transitions \
              -d '{"transition": {"id": "4"}}'
          else
            echo "No Jira issue key found"
            exit 1
          fi